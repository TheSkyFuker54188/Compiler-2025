// 简化的SSA优化测试用例

int test_constant_folding() {
    int a;
    int b;
    int c;
    
    a = 10 + 5;        // 应该折叠为 15
    b = 20 * 2;        // 应该折叠为 40  
    c = a + b;         // 应该折叠为 55
    
    return c;
}

int test_dead_code() {
    int alive;
    int dead1;
    int dead2;
    int used;
    
    alive = 5;
    dead1 = 10;        // 未使用，应该被删除
    dead2 = dead1 + 20; // 未使用，应该被删除
    used = alive * 2;
    
    return used;
}

int test_copy_prop() {
    int original;
    int copy1;
    int copy2;
    
    original = 100;
    copy1 = original;   // 应该被传播
    copy2 = copy1;      // 应该被传播
    
    return copy2;       // 应该直接返回 original
}

int test_arithmetic() {
    int x;
    int a;
    int b;
    int c;
    
    x = 42;
    a = x + 0;         // 应该简化为 x
    b = x * 1;         // 应该简化为 x
    c = 0 * x;         // 应该简化为 0
    
    return a + b + c;
}

int main() {
    int total;
    
    total = 0;
    total = total + test_constant_folding();
    total = total + test_dead_code();
    total = total + test_copy_prop();
    total = total + test_arithmetic();
    
    return total;
}
