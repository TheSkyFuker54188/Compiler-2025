// SSA优化测试用例
// 测试常量传播、常量折叠和死代码消除

int test_constant_propagation() {
    int a = 5;          // 常量
    int b = 10;         // 常量  
    int c = a + b;      // 应该被折叠为 c = 15
    int d = c * 2;      // 应该被折叠为 d = 30
    return d;           // 应该返回 30
}

int test_dead_code_elimination() {
    int a = 1;
    int b = 2;
    int unused = a + b; // 死代码，应该被消除
    int c = 5;
    return c;
}

int test_copy_propagation() {
    int a = 42;
    int b = a;          // 复制
    int c = b;          // 复制链
    return c;           // 应该直接返回 42
}

int test_arithmetic_folding() {
    int result = 0;
    result = 10 + 5;    // 应该折叠为 15
    result = result * 2; // 应该折叠为 30
    result = result - 5; // 应该折叠为 25
    result = result / 5; // 应该折叠为 5
    return result;
}

int test_comparison_folding() {
    int a = 10;
    int b = 20;
    
    if (5 < 10) {       // 应该折叠为 true
        return 1;
    }
    
    if (15 > 20) {      // 应该折叠为 false，死代码
        return 2;       // 这个分支应该被消除
    }
    
    return 0;
}

int test_phi_optimization() {
    int x;
    int flag = 1;
    
    if (flag) {
        x = 42;         // 常量
    } else {
        x = 42;         // 相同常量
    }
    
    // φ函数应该被优化为常量 42
    return x;
}

int main() {
    int result = 0;
    
    result += test_constant_propagation();  // 期望: 30
    result += test_dead_code_elimination(); // 期望: 5  
    result += test_copy_propagation();      // 期望: 42
    result += test_arithmetic_folding();    // 期望: 5
    result += test_comparison_folding();    // 期望: 1
    result += test_phi_optimization();      // 期望: 42
    
    return result;  // 期望总和: 125
}
