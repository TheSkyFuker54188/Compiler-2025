# RISC-V Assembly Code
# Generated by SYS Compiler with GlobalISel

.text
# Function: test_dead_code_elimination
.globl test_dead_code_elimination
test_dead_code_elimination:
    addi    a1, 0, 1
    sw      a1, 0(a0)
    addi    a3, 0, 2
    sw      a3, 0(a2)
    lw      a4, 0(a0)
    lw      a5, 0(a2)
    sw      a6, 0(a7)
    addi    t0, 0, 5
    sw      t0, 0(t1)
    lw      t2, 0(t1)
    mv      a0, t2
    ret

# Function: test_phi_optimization
.globl test_phi_optimization
test_phi_optimization:
    addi    a1, 0, 1
    sw      a1, 0(a0)
    lw      a2, 0(a0)
    beq     a3, zero, .L2
.L1:
    addi    t0, 0, 42
    sw      t0, 0(t1)
    jal     zero, .L3
.L2:
    addi    t2, 0, 42
    sw      t2, 0(t1)
    jal     zero, .L3
.L3:
    lw      t3, 0(t1)
    mv      a0, t3
    ret
.L4:
    li      a0, 0
    ret

# Function: test_constant_propagation
.globl test_constant_propagation
test_constant_propagation:
    addi    a1, 0, 5
    sw      a1, 0(a0)
    addi    a3, 0, 10
    sw      a3, 0(a2)
    lw      a4, 0(a0)
    lw      a5, 0(a2)
    sw      a6, 0(a7)
    lw      t0, 0(a7)
    sw      t1, 0(t2)
    lw      t3, 0(t2)
    mv      a0, t3
    ret

# Function: test_copy_propagation
.globl test_copy_propagation
test_copy_propagation:
    addi    a1, 0, 42
    sw      a1, 0(a0)
    lw      a2, 0(a0)
    sw      a2, 0(a3)
    lw      a4, 0(a3)
    sw      a4, 0(a5)
    lw      a6, 0(a5)
    mv      a0, a6
    ret

# Function: test_arithmetic_folding
.globl test_arithmetic_folding
test_arithmetic_folding:
    addi    a1, 0, 0
    sw      a1, 0(a0)
    sw      a2, 0(a0)
    lw      a3, 0(a0)
    sw      a4, 0(a0)
    lw      a5, 0(a0)
    sw      a6, 0(a0)
    lw      a7, 0(a0)
    sw      t0, 0(a0)
    lw      t1, 0(a0)
    mv      a0, t1
    ret

# Function: test_comparison_folding
.globl test_comparison_folding
test_comparison_folding:
    addi    a1, 0, 10
    sw      a1, 0(a0)
    addi    a3, 0, 20
    sw      a3, 0(a2)
    beq     a4, zero, .L2
.L1:
    li      a0, 1
    ret
.L2:
    jal     zero, .L3
.L3:
    beq     t0, zero, .L5
.L4:
    li      a0, 2
    ret
.L5:
    jal     zero, .L6
.L6:
    li      a0, 0
    ret
.L7:
    li      a0, 0
    ret

# Function: main
.globl main
main:
# Function prologue
    addi sp, sp, -32
    sw ra, 28(sp)
    sw s0, 24(sp)
    addi s0, sp, 32
    addi    a1, 0, 0
    sw      a1, 0(a0)
    lw      a2, 0(a0)
    jal     ra, test_constant_propagation
    mv      a3, a0
    sw      a4, 0(a0)
    lw      a5, 0(a0)
    jal     ra, test_dead_code_elimination
    mv      a6, a0
    sw      a7, 0(a0)
    lw      t0, 0(a0)
    jal     ra, test_copy_propagation
    mv      t1, a0
    sw      t2, 0(a0)
    lw      t3, 0(a0)
    jal     ra, test_arithmetic_folding
    mv      t4, a0
    sw      t5, 0(a0)
    lw      t6, 0(a0)
    jal     ra, test_comparison_folding
    mv      8(sp), a0
    sw      12(sp), 0(a0)
    lw      16(sp), 0(a0)
    jal     ra, test_phi_optimization
    mv      20(sp), a0
    sw      24(sp), 0(a0)
    lw      28(sp), 0(a0)
    mv      a0, 28(sp)
# Function epilogue
    lw s0, 24(sp)
    lw ra, 28(sp)
    addi sp, sp, 32
    ret

